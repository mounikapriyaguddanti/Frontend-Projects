In JavaScript, control flow structures, objects, and arrays are fundamental concepts for building complex and interactive applications. Here's an overview of each:
Control Flow:
Conditional Statements:
if...else: Allows you to execute different blocks of code based on whether a condition is true or false.
if (condition) {
    // code block to be executed if condition is true
} else {
    // code block to be executed if condition is false
}
switch: Evaluates an expression and executes code blocks based on matching cases.
switch (expression) {
    case value1:
        // code block
        break;
    case value2:
        // code block
        break;
    default:
        // code block
}
Loops:
for: Executes a block of code multiple times as long as a condition is true.
for (initialization; condition; increment/decrement) {
    // code block to be executed
}
while: Executes a block of code as long as a condition is true.
while (condition) {
    // code block to be executed
}
do...while: Similar to while loop but the code block is executed at least once before the condition is tested.
do {
    // code block to be executed
} while (condition);
Objects:
Objects in JavaScript are collections of key-value pairs. They are used to store multiple values as properties and methods.
let person = {
    name: "John",
    age: 30,
    gender: "male",
    greet: function() {
        return "Hello, my name is " + this.name;
    }
};
console.log(person.name); // Accessing property
console.log(person.greet()); // Accessing method
Arrays:
Arrays in JavaScript are used to store multiple values in a single variable. They can hold different types of data and can dynamically resize.
let colors = ["red", "green", "blue"];
console.log(colors[0]); // Accessing elements
colors.push("yellow"); // Adding an element
colors.pop(); // Removing the last element
Arrays also have various methods like push(), pop(), shift(), unshift(), splice(), etc., for manipulation.
